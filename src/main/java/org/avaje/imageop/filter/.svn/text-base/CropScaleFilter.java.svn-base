package app.imagestore.filter;

import java.awt.image.BufferedImage;
import java.math.BigDecimal;
import java.math.RoundingMode;

public class CropScaleFilter extends AbstractBufferedImageOp {

    private final int maxWidth;
    private final int maxHeight;
    
    public CropScaleFilter(int x, int y) {
        this.maxWidth = x;
        this.maxHeight = y;
    }
    
    public BufferedImage filter(BufferedImage src, BufferedImage dest) {
        
        int origHeight = src.getHeight();
        int origWidth = src.getWidth();

        BigDecimal maxWidthBd = new BigDecimal(maxWidth);
        BigDecimal maxHeightBd = new BigDecimal(maxHeight);
        
        BigDecimal origHBd = new BigDecimal(origHeight);
        BigDecimal origWBd = new BigDecimal(origWidth);
        
        BigDecimal scaleWidthDb = origWBd.divide(maxWidthBd, 6, RoundingMode.HALF_DOWN);
        BigDecimal scaleHeightDb = origHBd.divide(maxHeightBd, 6, RoundingMode.HALF_DOWN);
        
        int minsWint = origWidth;
        int minsHint = origHeight;

        System.out.println("scaleWidthDb:"+scaleWidthDb+" scaleHeightDb:"+scaleHeightDb);

        int x = 0;
        int y = 0;
        BigDecimal minScaleDb = scaleWidthDb.min(scaleHeightDb);
        BigDecimal maxScaleDb = scaleWidthDb.max(scaleHeightDb);
        if (minScaleDb.compareTo(scaleWidthDb) == 0){
            // width was min
            BigDecimal tmp = origHBd.multiply(minScaleDb);
            minsHint = tmp.divide(maxScaleDb, 6, RoundingMode.HALF_DOWN).intValue();
            System.out.println("change height minsHint:"+minsHint);
            y = (origHeight - minsHint) / 2;
        } else {
            BigDecimal tmp = origWBd.multiply(minScaleDb);
            minsWint = tmp.divide(maxScaleDb, 6, RoundingMode.HALF_DOWN).intValue();
            System.out.println("change width minsWint:"+minsWint);
            x = (origWidth - minsWint) / 2;
        }
               
        CropFilter cropFilter = new CropFilter(x,y, minsWint, minsHint);
        BufferedImage croppedImg = cropFilter.filter(src, null);
        
        ScaleFilter scaleFilter = new ScaleFilter(maxWidth, maxHeight);
        return scaleFilter.filter(croppedImg, null);
    }

    
}
